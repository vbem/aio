---
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
name: Baseline
author: i@lilei.tech
description: Setup baseline configurations for a workflow

inputs: {}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  path:
    description: Path to a script of common functions
    value: ${{ steps.gen.outputs.path }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: composite
  steps:
    - name: Generate baseline configurations script
      id: gen
      env:
        STEP_PATH: ${{ runner.temp }}/baseline.bash
        STEP_SCRIPT: |
          # common functions
          
          # Group stdin to stdout with title
          # $1: group tile
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
          function bl::wf::group {
            echo "::group::ðŸ’¬ $1"; cat; echo "::endgroup::"
          }
          
          # Set stdin as value to environment with given name
          # $1: environment variable name
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          function bl::wf::env {
            echo "$1<<__HEREDOC__" >> $GITHUB_ENV
            cat >> $GITHUB_ENV
            echo "__HEREDOC__" >> $GITHUB_ENV
          }
          
          # Set stdin as value to output of current step with given name
          # $1: output name
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
          # https://renehernandez.io/snippets/multiline-strings-as-a-job-output-in-github-actions/
          function bl::wf::output {
            local val="$(< /dev/stdin)"
            echo "::set-output name=$1::$val"
            echo "$val" | bl::wf::group "set-output ðŸ‘‰ $1"
          }
          
          # Flatten JSON to key-value lines
          #   $1: separator (default as ' ðŸ‘‰ ')
          function bl::json::flatten {
            jq -Mcr --arg sep "${1:- ðŸ‘‰ }" 'paths(type!="object" and type!="array") as $p | {"key":$p|join("."),"value":getpath($p)} | "\(.key)\($sep)\(.value|@json)"'
          }
      shell: bash
      run: |
        echo -n "$STEP_SCRIPT" > ${{ env.STEP_PATH }}
        source ${{ env.STEP_PATH }}
        echo -n "${{ env.STEP_PATH }}" | bl::wf::output path
        
    - name: Show contexts # https://docs.github.com/en/actions/learn-github-actions/contexts
      env:
        STEP_CTX_GITHUB:  ${{ toJson(github) }}
        STEP_CTX_RUNNER:  ${{ toJson(runner) }}
      run: |
        source {{ steps.gen.outputs.path }}
        echo {'"github"':"$STEP_CTX_GITHUB"} | jq 'del(.github.token)|del(.github.event)' | bl::json::flatten | bl::wf::group 'github without event'
        echo "$STEP_CTX_GITHUB" | jq '{"github.event":.event}' | bl::json::flatten | bl::wf::group 'github.event'
        echo {'"runner"':"$STEP_CTX_RUNNER"} | bl::json::flatten | bl::wf::group 'runner'
...
