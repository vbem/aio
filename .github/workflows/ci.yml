---
name: Continuous Integration
# For push tag event:
# - If Git tag observe semver, image with this tag will be built
# - If Git tag is a stable semver, image with latest tag will also be built
# - Images will be pushed to remote
# For push branch event:
# - A generated tag with time and SHA will be built
# - Images will not be pushed to remote
# For `workflow_dispatch` event:
# - If image tag is not specified in inputs, A generated tag with time and SHA will be built
# - Whether push or not depends on inputs
#
# - To disable this workflow: https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow
# - To skip this workflow: https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs

env:
  # only change these for container registry
  WF_CR_HOST:     docker.io
  WF_CR_USER:     ${{ github.repository_owner }}
  WF_CR_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
  WF_CR_REPO:     ${{ github.repository }}

  # only change these for GitHub Packages container registry
  WF_GHCR_HOST:   ghcr.io
  WF_GHCR_USER:   ${{ github.actor }}
  WF_GHCR_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
  WF_GHCR_REPO:   ${{ github.repository }}

  # other control variables
  WF_IS_ARTIFACT: true
  TZ:             Asia/Shanghai

  # DON'T change these
  WF_IS_PUSH:     ${{ github.ref_type == 'tag' || github.event.inputs.img-push == 'true' }}
  WF_IS_TAG_GEN:  ${{ github.ref_type != 'tag' && github.event.inputs.img-tag == '' }}

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

on:
  push: # If you define neither tags(-ignore) nor branches(-ignore), the workflow will run for either branches or tags.
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'src/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs: # https://docs.github.com/actions/using-workflows/triggering-a-workflow#defining-inputs-for-manually-triggered-workflows
      img-tag:
        description: Image tag (https://semver.org/, e.g. `v1.2.3-beta.45`), blank to generate a tag with time and SHA
        type: string
        required: false
        default: ''
      img-push:
        description: 'Push to remote container registry'
        type: boolean
        required: false
        default: 'false'

jobs:
  CI:
    runs-on: ubuntu-latest

    outputs:
      meta-version:   ${{ steps.meta.outputs.version }}
      meta-tags:      ${{ steps.meta.outputs.tags }}
      meta-labels:    ${{ steps.meta.outputs.labels }}
      meta-json:      ${{ steps.meta.outputs.json }}
      build-digest:   ${{ steps.build.outputs.digest }}
      build-metadata: ${{ steps.build.outputs.metadata }}

    steps:
      # https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v3

      # https://github.com/marketplace/actions/flatten-contexts
      - uses: vbem/flatten-contexts@v1

      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Extract metadata from Git reference and GitHub events -> ${{ github.ref }}@${{ github.event_name }}
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: | # https://semver.org/
            ${{ env.WF_CR_HOST }}/${{ env.WF_CR_REPO }}
            ${{ env.WF_GHCR_HOST }}/${{ env.WF_GHCR_REPO }}
          tags: | # https://momentjs.com/docs/#/displaying/format/
            type=semver,pattern={{version}}
            type=raw,value=${{ github.event.inputs.img-tag }},enable=${{ github.event.inputs.img-tag != '' }}
            type=raw,value=0.${{ github.run_number }}.${{ github.run_attempt }}-time.{{date 'YYYYMMDDHHmmssz'}}.sha.{{sha}},enable=${{ env.WF_IS_TAG_GEN }}
          labels: | # https://github.com/opencontainers/image-spec/blob/master/annotations.md
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login remote container registry -> ${{ env.WF_CR_USER }}@${{ env.WF_CR_HOST }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.WF_CR_HOST }}
          username: ${{ env.WF_CR_USER }}
          password: ${{ env.WF_CR_TOKEN }}

      # https://github.com/marketplace/actions/docker-login
      - name: Login remote container registry -> ${{ env.WF_GHCR_USER }}@${{ env.WF_GHCR_HOST }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.WF_GHCR_HOST }}
          username: ${{ env.WF_GHCR_USER }}
          password: ${{ env.WF_GHCR_TOKEN }}

      # https://github.com/marketplace/actions/docker-setup-buildx
      - uses: docker/setup-buildx-action@v1
        with:
          driver: docker # https://github.com/docker/setup-buildx-action/issues/55

      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build image with push=${{ env.WF_IS_PUSH }} -> ${{ join(fromJSON(steps.meta.outputs.json).tags, ' & ') }}
        id: build
        uses: docker/build-push-action@v2
        with:
          context: .
          pull: true
          push: ${{ env.WF_IS_PUSH }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # https://github.com/marketplace/actions/docker-hub-description
      # https://github.com/peter-evans/dockerhub-description/tree/v3.0.0
      # https://docs.github.com/en/actions/learn-github-actions/finding-and-customizing-actions#using-release-management-for-your-custom-actions
      - name: Update Docker Hub description -> https://hub.docker.com/r/${{ github.repository }}
        if: env.WF_IS_PUSH == 'true'
        uses: peter-evans/dockerhub-description@836d7e6aa8f6f32dce26f5a1dd46d3dc24997eae
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ github.event.repository.description }}
          #repository: ${{ github.repository }}
          #readme-filepath: ./README.md

      # https://github.com/marketplace/actions/kit.bash
      - uses: vbem/kit.bash@main
        id: kit

      - name: Dig local image -> ${{ env.STEP_NAME }}
        id: dig
        env:
          STEP_NAME:    ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          STEP_ARCHIVE: ${{ runner.temp }}/image.tar.gz
        run: |
          ${{ steps.kit.outputs.source }}
          docker image history '${{ env.STEP_NAME }}' | kit::wf::group "🐳 docker image history"
          docker image inspect '${{ env.STEP_NAME }}' | jq -Mcre '.[]' | kit::json::flatten \
            | kit::wf::group "🐳 docker image inspect"
          if [[ "${{ env.WF_IS_ARTIFACT }}" == "true" ]]; then
            kit::log::stderr INFO "🐳 Saving image to archive -> ${{ env.STEP_ARCHIVE }}"
            time docker image save '${{ env.STEP_NAME }}' | gzip -v > '${{ env.STEP_ARCHIVE }}'
            ls -ald --full-time '${{ env.STEP_ARCHIVE }}'
            kit::wf::output 'archive' grouped <<< '${{ env.STEP_ARCHIVE }}'
          fi

      # https://github.com/marketplace/actions/upload-a-build-artifact
      - if: env.WF_IS_ARTIFACT == 'true'
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          path: |
            ${{ steps.dig.outputs.archive }}
...