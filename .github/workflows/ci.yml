name: Continuous Integration
# For push tag event:
# - If Git tag observe semver, image with this tag will be built
# - If Git tag is a stable semver, image with latest tag will also be built
# - Images will be pushed to remote
# For push branch event:
# - A generated tag with time and SHA will be built
# - Images will not be pushed to remote
# For `workflow_dispatch` event:
# - If image tag is not specified in inputs, A generated tag with time and SHA will be built
# - Whether push or not depends on inputs
#
# - To disable this workflow: https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow
# - To skip this workflow: https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs

env:
  # only change these
  WF_CR_HOST:     docker.io
  WF_CR_USER:     ${{ github.repository_owner }}
  WF_CR_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}
  WF_CR_REPO:     ${{ github.repository }}

  # DON'T change these
  WF_IS_PUSH:     ${{ github.ref_type == 'tag' || github.event.inputs.img-push == 'true' }}
  WF_IS_TAG_GEN:  ${{ github.ref_type != 'tag' && github.event.inputs.img-tag == '' }}
  WF_IS_ARTIFACT: true
  TZ:             Asia/Shanghai
  WF_RUN_SETUP:   |
    # Group stdin to stdout with title
    # $1: group tile
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines
    function toGroup {
      echo "::group::$1"; cat; echo "::endgroup::"
    }

    # Set stdin as value to environment with given name
    # $1: environment variable name
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
    function toEnv {
      echo "$1<<__HEREDOC__" >> $GITHUB_ENV
      cat >> $GITHUB_ENV
      echo "__HEREDOC__" >> $GITHUB_ENV
    }

    # Set stdin as value to output of current step with given name
    # $1: output name
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
    # https://renehernandez.io/snippets/multiline-strings-as-a-job-output-in-github-actions/
    function toOutput {
      val="$(< /dev/stdin)"
      echo "::set-output name=$1::$val"
      echo "$val" | toGroup "set-output -> $1"
    }

    # Flatten JSON to key-value lines
    #   $1: separator (default as ' -> ')
    function flattenJson {
      jq -Mcr --arg sep "${1:- -> }" 'paths(type!="object" and type!="array") as $p | {"key":$p|join("."),"value":getpath($p)} | "\(.key)\($sep)\(.value|@json)"'
    }

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

on:
  push: # If you define neither tags(-ignore) nor branches(-ignore), the workflow will run for either branches or tags.
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'src/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs: # https://docs.github.com/actions/using-workflows/triggering-a-workflow#defining-inputs-for-manually-triggered-workflows
      img-tag:
        description: Image tag (https://semver.org/, e.g. `v1.2.3-beta.45`), blank to generate a tag with time and SHA
        type: string
        required: false
        default: ''
      img-push:
        description: 'Push to remote container registry'
        type: boolean
        required: false
        default: 'false'

jobs:
  CI:
    runs-on: ubuntu-latest

    outputs:
      meta-version:   ${{ steps.meta.outputs.version }}
      meta-tags:      ${{ steps.meta.outputs.tags }}
      meta-labels:    ${{ steps.meta.outputs.labels }}
      meta-json:      ${{ steps.meta.outputs.json }}
      build-digest:   ${{ steps.build.outputs.digest }}
      build-metadata: ${{ steps.build.outputs.metadata }}
      inspect-json:   ${{ steps.inspect.outputs.json }}

    steps:
      - uses: actions/checkout@v3 # https://github.com/marketplace/actions/checkout

      - name: Show contexts # https://docs.github.com/en/actions/learn-github-actions/contexts
        continue-on-error: true
        env:
          STEP_CTX_GITHUB:  ${{ toJson(github) }}
          STEP_CTX_RUNNER:  ${{ toJson(runner) }}
        run: |
          ${{ env.WF_RUN_SETUP }}
          echo {'"github"':"$STEP_CTX_GITHUB"} | jq 'del(.github.token)|del(.github.event)' | flattenJson | toGroup 'github without event'
          echo "$STEP_CTX_GITHUB" | jq '{"github.event":.event}' | flattenJson | toGroup 'github.event'
          echo {'"runner"':"$STEP_CTX_RUNNER"} | flattenJson | toGroup 'runner'

      - name: Extract metadata from Git reference and GitHub events -> ${{ github.ref }}@${{ github.event_name }}
        id: meta
        uses: docker/metadata-action@v3 # https://github.com/marketplace/actions/docker-metadata-action
        with:
          images: |
            ${{ env.WF_CR_HOST }}/${{ env.WF_CR_REPO }}
            ghcr.io/${{ github.repository }}
          # https://semver.org/
          # https://momentjs.com/docs/#/displaying/format/
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=${{ github.event.inputs.img-tag }},enable=${{ github.event.inputs.img-tag != '' }}
            type=raw,value=0.${{ github.run_number }}.${{ github.run_attempt }}-time.{{date 'YYYYMMDDHHmmssz'}}.sha.{{sha}},enable=${{ env.WF_IS_TAG_GEN }}
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md
          labels: |
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Login remote container registry -> ${{ env.WF_CR_USER }}@${{ env.WF_CR_HOST }}
        if: env.WF_IS_PUSH == 'true'
        uses: docker/login-action@v1 # https://github.com/marketplace/actions/docker-login
        with:
          registry: ${{ env.WF_CR_HOST }}
          username: ${{ env.WF_CR_USER }}
          password: ${{ env.WF_CR_TOKEN }}

      - name: Login remote container registry -> ${{ github.actor }}@ghcr.io
        if: env.WF_IS_PUSH == 'true'
        uses: docker/login-action@v1 # https://github.com/marketplace/actions/docker-login
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v1 # https://github.com/marketplace/actions/docker-setup-buildx
        with:
          driver: docker # https://github.com/docker/setup-buildx-action/issues/55

      - name: Build image with push=${{ env.WF_IS_PUSH }} -> ${{ join(fromJSON(steps.meta.outputs.json).tags, ' & ') }}
        id: build
        uses: docker/build-push-action@v2 # https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: .
          push: ${{ env.WF_IS_PUSH }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=tar,dest=${{ runner.temp }}/image.tar

      - name: Inspect image -> ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        id: inspect
        continue-on-error: true
        run: |
          ${{ env.WF_RUN_SETUP }}
          docker image history ${{ fromJSON(steps.meta.outputs.json).tags[0] }} | toGroup 'history'
          docker image inspect ${{ fromJSON(steps.meta.outputs.json).tags[0] }} | flattenJson | toGroup 'inspect'
          docker image inspect ${{ fromJSON(steps.meta.outputs.json).tags[0] }} | jq -Mcr '.[]' | toOutput 'json'

      - run: |
          ls -al ${{ runner.temp }}


